(0: CompOp , 0: != )!=
(0: CompOp , 1: % )
(0: CompOp , 2: & )
(0: CompOp , 3: '' )
(0: CompOp , 4: ( )
(0: CompOp , 5: ) )
(0: CompOp , 6: * )
(0: CompOp , 7: + )
(0: CompOp , 8: , )
(0: CompOp , 9: - )
(0: CompOp , 10: / )
(0: CompOp , 11: ; )
(0: CompOp , 12: < )<
(0: CompOp , 13: <= )<=
(0: CompOp , 14: = )
(0: CompOp , 15: == )==
(0: CompOp , 16: > )>
(0: CompOp , 17: >= )>=
(0: CompOp , 18: FLOAT )
(0: CompOp , 19: ID )
(0: CompOp , 20: NUMBER )
(0: CompOp , 21: None )
(0: CompOp , 22: STRING )
(0: CompOp , 23: [ )
(0: CompOp , 24: ] )
(0: CompOp , 25: begin )
(0: CompOp , 26: else )
(0: CompOp , 27: end )
(0: CompOp , 28: false )
(0: CompOp , 29: for )
(0: CompOp , 30: if )
(0: CompOp , 31: in )
(0: CompOp , 32: loadPdf )
(0: CompOp , 33: mergePdf )
(0: CompOp , 34: optimizePdf )
(0: CompOp , 35: splitPdf )
(0: CompOp , 36: true )
(0: CompOp , 37: while )
(0: CompOp , 38: { )
(0: CompOp , 39: | )
(0: CompOp , 40: } )
(1: ListTail , 0: != )
(1: ListTail , 1: % )
(1: ListTail , 2: & )
(1: ListTail , 3: '' )
(1: ListTail , 4: ( )
(1: ListTail , 5: ) )
(1: ListTail , 6: * )
(1: ListTail , 7: + )
(1: ListTail , 8: , ),FactorListTail
(1: ListTail , 9: - )
(1: ListTail , 10: / )
(1: ListTail , 11: ; )
(1: ListTail , 12: < )
(1: ListTail , 13: <= )
(1: ListTail , 14: = )
(1: ListTail , 15: == )
(1: ListTail , 16: > )
(1: ListTail , 17: >= )
(1: ListTail , 18: FLOAT )
(1: ListTail , 19: ID )
(1: ListTail , 20: NUMBER )
(1: ListTail , 21: None )
(1: ListTail , 22: STRING )
(1: ListTail , 23: [ )
(1: ListTail , 24: ] )
(1: ListTail , 25: begin )
(1: ListTail , 26: else )
(1: ListTail , 27: end )
(1: ListTail , 28: false )
(1: ListTail , 29: for )
(1: ListTail , 30: if )
(1: ListTail , 31: in )
(1: ListTail , 32: loadPdf )
(1: ListTail , 33: mergePdf )
(1: ListTail , 34: optimizePdf )
(1: ListTail , 35: splitPdf )
(1: ListTail , 36: true )
(1: ListTail , 37: while )
(1: ListTail , 38: { )
(1: ListTail , 39: | )
(1: ListTail , 40: } )''
(2: Literal , 0: != )
(2: Literal , 1: % )
(2: Literal , 2: & )
(2: Literal , 3: '' )
(2: Literal , 4: ( )
(2: Literal , 5: ) )
(2: Literal , 6: * )
(2: Literal , 7: + )
(2: Literal , 8: , )
(2: Literal , 9: - )
(2: Literal , 10: / )
(2: Literal , 11: ; )
(2: Literal , 12: < )
(2: Literal , 13: <= )
(2: Literal , 14: = )
(2: Literal , 15: == )
(2: Literal , 16: > )
(2: Literal , 17: >= )
(2: Literal , 18: FLOAT )FLOAT
(2: Literal , 19: ID )
(2: Literal , 20: NUMBER )NUMBER
(2: Literal , 21: None )None
(2: Literal , 22: STRING )STRING
(2: Literal , 23: [ )
(2: Literal , 24: ] )
(2: Literal , 25: begin )
(2: Literal , 26: else )
(2: Literal , 27: end )
(2: Literal , 28: false )false
(2: Literal , 29: for )
(2: Literal , 30: if )
(2: Literal , 31: in )
(2: Literal , 32: loadPdf )
(2: Literal , 33: mergePdf )
(2: Literal , 34: optimizePdf )
(2: Literal , 35: splitPdf )
(2: Literal , 36: true )true
(2: Literal , 37: while )
(2: Literal , 38: { )
(2: Literal , 39: | )
(2: Literal , 40: } )
(3: Factor , 0: != )
(3: Factor , 1: % )
(3: Factor , 2: & )
(3: Factor , 3: '' )
(3: Factor , 4: ( )
(3: Factor , 5: ) )
(3: Factor , 6: * )
(3: Factor , 7: + )
(3: Factor , 8: , )
(3: Factor , 9: - )-Factor
(3: Factor , 10: / )
(3: Factor , 11: ; )
(3: Factor , 12: < )
(3: Factor , 13: <= )
(3: Factor , 14: = )
(3: Factor , 15: == )
(3: Factor , 16: > )
(3: Factor , 17: >= )
(3: Factor , 18: FLOAT )Literal
(3: Factor , 19: ID )Name
(3: Factor , 20: NUMBER )Literal
(3: Factor , 21: None )Literal
(3: Factor , 22: STRING )Literal
(3: Factor , 23: [ )
(3: Factor , 24: ] )
(3: Factor , 25: begin )
(3: Factor , 26: else )
(3: Factor , 27: end )
(3: Factor , 28: false )Literal
(3: Factor , 29: for )
(3: Factor , 30: if )
(3: Factor , 31: in )
(3: Factor , 32: loadPdf )
(3: Factor , 33: mergePdf )
(3: Factor , 34: optimizePdf )
(3: Factor , 35: splitPdf )
(3: Factor , 36: true )Literal
(3: Factor , 37: while )
(3: Factor , 38: { )
(3: Factor , 39: | )
(3: Factor , 40: } )
(4: Index , 0: != )''
(4: Index , 1: % )''
(4: Index , 2: & )''
(4: Index , 3: '' )
(4: Index , 4: ( )
(4: Index , 5: ) )''
(4: Index , 6: * )''
(4: Index , 7: + )''
(4: Index , 8: , )''
(4: Index , 9: - )''
(4: Index , 10: / )''
(4: Index , 11: ; )''
(4: Index , 12: < )''
(4: Index , 13: <= )''
(4: Index , 14: = )
(4: Index , 15: == )''
(4: Index , 16: > )''
(4: Index , 17: >= )''
(4: Index , 18: FLOAT )
(4: Index , 19: ID )
(4: Index , 20: NUMBER )
(4: Index , 21: None )
(4: Index , 22: STRING )
(4: Index , 23: [ )[Term]
(4: Index , 24: ] )''
(4: Index , 25: begin )
(4: Index , 26: else )
(4: Index , 27: end )
(4: Index , 28: false )
(4: Index , 29: for )
(4: Index , 30: if )
(4: Index , 31: in )
(4: Index , 32: loadPdf )
(4: Index , 33: mergePdf )
(4: Index , 34: optimizePdf )
(4: Index , 35: splitPdf )
(4: Index , 36: true )
(4: Index , 37: while )
(4: Index , 38: { )
(4: Index , 39: | )''
(4: Index , 40: } )''
(5: TermP , 0: != )''
(5: TermP , 1: % )OperatorFactorTermP
(5: TermP , 2: & )''
(5: TermP , 3: '' )
(5: TermP , 4: ( )
(5: TermP , 5: ) )''
(5: TermP , 6: * )OperatorFactorTermP
(5: TermP , 7: + )OperatorFactorTermP
(5: TermP , 8: , )
(5: TermP , 9: - )OperatorFactorTermP
(5: TermP , 10: / )OperatorFactorTermP
(5: TermP , 11: ; )
(5: TermP , 12: < )''
(5: TermP , 13: <= )''
(5: TermP , 14: = )
(5: TermP , 15: == )''
(5: TermP , 16: > )''
(5: TermP , 17: >= )''
(5: TermP , 18: FLOAT )
(5: TermP , 19: ID )
(5: TermP , 20: NUMBER )
(5: TermP , 21: None )
(5: TermP , 22: STRING )
(5: TermP , 23: [ )
(5: TermP , 24: ] )''
(5: TermP , 25: begin )
(5: TermP , 26: else )
(5: TermP , 27: end )
(5: TermP , 28: false )
(5: TermP , 29: for )
(5: TermP , 30: if )
(5: TermP , 31: in )
(5: TermP , 32: loadPdf )
(5: TermP , 33: mergePdf )
(5: TermP , 34: optimizePdf )
(5: TermP , 35: splitPdf )
(5: TermP , 36: true )
(5: TermP , 37: while )
(5: TermP , 38: { )
(5: TermP , 39: | )''
(5: TermP , 40: } )
(6: Term , 0: != )
(6: Term , 1: % )
(6: Term , 2: & )
(6: Term , 3: '' )
(6: Term , 4: ( )
(6: Term , 5: ) )
(6: Term , 6: * )
(6: Term , 7: + )
(6: Term , 8: , )
(6: Term , 9: - )FactorTermP
(6: Term , 10: / )
(6: Term , 11: ; )
(6: Term , 12: < )
(6: Term , 13: <= )
(6: Term , 14: = )
(6: Term , 15: == )
(6: Term , 16: > )
(6: Term , 17: >= )
(6: Term , 18: FLOAT )FactorTermP
(6: Term , 19: ID )FactorTermP
(6: Term , 20: NUMBER )FactorTermP
(6: Term , 21: None )FactorTermP
(6: Term , 22: STRING )FactorTermP
(6: Term , 23: [ )
(6: Term , 24: ] )
(6: Term , 25: begin )
(6: Term , 26: else )
(6: Term , 27: end )
(6: Term , 28: false )FactorTermP
(6: Term , 29: for )
(6: Term , 30: if )
(6: Term , 31: in )
(6: Term , 32: loadPdf )
(6: Term , 33: mergePdf )
(6: Term , 34: optimizePdf )
(6: Term , 35: splitPdf )
(6: Term , 36: true )FactorTermP
(6: Term , 37: while )
(6: Term , 38: { )
(6: Term , 39: | )
(6: Term , 40: } )
(7: Operator , 0: != )
(7: Operator , 1: % )%
(7: Operator , 2: & )
(7: Operator , 3: '' )
(7: Operator , 4: ( )
(7: Operator , 5: ) )
(7: Operator , 6: * )*
(7: Operator , 7: + )+
(7: Operator , 8: , )
(7: Operator , 9: - )-
(7: Operator , 10: / )/
(7: Operator , 11: ; )
(7: Operator , 12: < )
(7: Operator , 13: <= )
(7: Operator , 14: = )
(7: Operator , 15: == )
(7: Operator , 16: > )
(7: Operator , 17: >= )
(7: Operator , 18: FLOAT )
(7: Operator , 19: ID )
(7: Operator , 20: NUMBER )
(7: Operator , 21: None )
(7: Operator , 22: STRING )
(7: Operator , 23: [ )
(7: Operator , 24: ] )
(7: Operator , 25: begin )
(7: Operator , 26: else )
(7: Operator , 27: end )
(7: Operator , 28: false )
(7: Operator , 29: for )
(7: Operator , 30: if )
(7: Operator , 31: in )
(7: Operator , 32: loadPdf )
(7: Operator , 33: mergePdf )
(7: Operator , 34: optimizePdf )
(7: Operator , 35: splitPdf )
(7: Operator , 36: true )
(7: Operator , 37: while )
(7: Operator , 38: { )
(7: Operator , 39: | )
(7: Operator , 40: } )
(8: CompExprP , 0: != )CompOpTerm
(8: CompExprP , 1: % )
(8: CompExprP , 2: & )''
(8: CompExprP , 3: '' )
(8: CompExprP , 4: ( )
(8: CompExprP , 5: ) )''
(8: CompExprP , 6: * )
(8: CompExprP , 7: + )
(8: CompExprP , 8: , )
(8: CompExprP , 9: - )
(8: CompExprP , 10: / )
(8: CompExprP , 11: ; )
(8: CompExprP , 12: < )CompOpTerm
(8: CompExprP , 13: <= )CompOpTerm
(8: CompExprP , 14: = )
(8: CompExprP , 15: == )CompOpTerm
(8: CompExprP , 16: > )CompOpTerm
(8: CompExprP , 17: >= )CompOpTerm
(8: CompExprP , 18: FLOAT )
(8: CompExprP , 19: ID )
(8: CompExprP , 20: NUMBER )
(8: CompExprP , 21: None )
(8: CompExprP , 22: STRING )
(8: CompExprP , 23: [ )
(8: CompExprP , 24: ] )
(8: CompExprP , 25: begin )
(8: CompExprP , 26: else )
(8: CompExprP , 27: end )
(8: CompExprP , 28: false )
(8: CompExprP , 29: for )
(8: CompExprP , 30: if )
(8: CompExprP , 31: in )
(8: CompExprP , 32: loadPdf )
(8: CompExprP , 33: mergePdf )
(8: CompExprP , 34: optimizePdf )
(8: CompExprP , 35: splitPdf )
(8: CompExprP , 36: true )
(8: CompExprP , 37: while )
(8: CompExprP , 38: { )
(8: CompExprP , 39: | )''
(8: CompExprP , 40: } )
(9: Name , 0: != )
(9: Name , 1: % )
(9: Name , 2: & )
(9: Name , 3: '' )
(9: Name , 4: ( )
(9: Name , 5: ) )
(9: Name , 6: * )
(9: Name , 7: + )
(9: Name , 8: , )
(9: Name , 9: - )
(9: Name , 10: / )
(9: Name , 11: ; )
(9: Name , 12: < )
(9: Name , 13: <= )
(9: Name , 14: = )
(9: Name , 15: == )
(9: Name , 16: > )
(9: Name , 17: >= )
(9: Name , 18: FLOAT )
(9: Name , 19: ID )IDIndex
(9: Name , 20: NUMBER )
(9: Name , 21: None )
(9: Name , 22: STRING )
(9: Name , 23: [ )
(9: Name , 24: ] )
(9: Name , 25: begin )
(9: Name , 26: else )
(9: Name , 27: end )
(9: Name , 28: false )
(9: Name , 29: for )
(9: Name , 30: if )
(9: Name , 31: in )
(9: Name , 32: loadPdf )
(9: Name , 33: mergePdf )
(9: Name , 34: optimizePdf )
(9: Name , 35: splitPdf )
(9: Name , 36: true )
(9: Name , 37: while )
(9: Name , 38: { )
(9: Name , 39: | )
(9: Name , 40: } )
(10: While , 0: != )
(10: While , 1: % )
(10: While , 2: & )
(10: While , 3: '' )
(10: While , 4: ( )
(10: While , 5: ) )
(10: While , 6: * )
(10: While , 7: + )
(10: While , 8: , )
(10: While , 9: - )
(10: While , 10: / )
(10: While , 11: ; )
(10: While , 12: < )
(10: While , 13: <= )
(10: While , 14: = )
(10: While , 15: == )
(10: While , 16: > )
(10: While , 17: >= )
(10: While , 18: FLOAT )
(10: While , 19: ID )
(10: While , 20: NUMBER )
(10: While , 21: None )
(10: While , 22: STRING )
(10: While , 23: [ )
(10: While , 24: ] )
(10: While , 25: begin )
(10: While , 26: else )
(10: While , 27: end )
(10: While , 28: false )
(10: While , 29: for )
(10: While , 30: if )
(10: While , 31: in )
(10: While , 32: loadPdf )
(10: While , 33: mergePdf )
(10: While , 34: optimizePdf )
(10: While , 35: splitPdf )
(10: While , 36: true )
(10: While , 37: while )while(Expression){Statements}
(10: While , 38: { )
(10: While , 39: | )
(10: While , 40: } )
(11: Statements , 0: != )
(11: Statements , 1: % )
(11: Statements , 2: & )
(11: Statements , 3: '' )
(11: Statements , 4: ( )
(11: Statements , 5: ) )
(11: Statements , 6: * )
(11: Statements , 7: + )
(11: Statements , 8: , )
(11: Statements , 9: - )
(11: Statements , 10: / )
(11: Statements , 11: ; )
(11: Statements , 12: < )
(11: Statements , 13: <= )
(11: Statements , 14: = )
(11: Statements , 15: == )
(11: Statements , 16: > )
(11: Statements , 17: >= )
(11: Statements , 18: FLOAT )
(11: Statements , 19: ID )Statement;Statements
(11: Statements , 20: NUMBER )
(11: Statements , 21: None )
(11: Statements , 22: STRING )
(11: Statements , 23: [ )
(11: Statements , 24: ] )
(11: Statements , 25: begin )
(11: Statements , 26: else )
(11: Statements , 27: end )''
(11: Statements , 28: false )
(11: Statements , 29: for )Statement;Statements
(11: Statements , 30: if )Statement;Statements
(11: Statements , 31: in )
(11: Statements , 32: loadPdf )
(11: Statements , 33: mergePdf )
(11: Statements , 34: optimizePdf )
(11: Statements , 35: splitPdf )
(11: Statements , 36: true )
(11: Statements , 37: while )Statement;Statements
(11: Statements , 38: { )
(11: Statements , 39: | )
(11: Statements , 40: } )''
(12: Statement , 0: != )
(12: Statement , 1: % )
(12: Statement , 2: & )
(12: Statement , 3: '' )
(12: Statement , 4: ( )
(12: Statement , 5: ) )
(12: Statement , 6: * )
(12: Statement , 7: + )
(12: Statement , 8: , )
(12: Statement , 9: - )
(12: Statement , 10: / )
(12: Statement , 11: ; )
(12: Statement , 12: < )
(12: Statement , 13: <= )
(12: Statement , 14: = )
(12: Statement , 15: == )
(12: Statement , 16: > )
(12: Statement , 17: >= )
(12: Statement , 18: FLOAT )
(12: Statement , 19: ID )Assign
(12: Statement , 20: NUMBER )
(12: Statement , 21: None )
(12: Statement , 22: STRING )
(12: Statement , 23: [ )
(12: Statement , 24: ] )
(12: Statement , 25: begin )
(12: Statement , 26: else )
(12: Statement , 27: end )
(12: Statement , 28: false )
(12: Statement , 29: for )For
(12: Statement , 30: if )If
(12: Statement , 31: in )
(12: Statement , 32: loadPdf )
(12: Statement , 33: mergePdf )
(12: Statement , 34: optimizePdf )
(12: Statement , 35: splitPdf )
(12: Statement , 36: true )
(12: Statement , 37: while )While
(12: Statement , 38: { )
(12: Statement , 39: | )
(12: Statement , 40: } )
(13: For , 0: != )
(13: For , 1: % )
(13: For , 2: & )
(13: For , 3: '' )
(13: For , 4: ( )
(13: For , 5: ) )
(13: For , 6: * )
(13: For , 7: + )
(13: For , 8: , )
(13: For , 9: - )
(13: For , 10: / )
(13: For , 11: ; )
(13: For , 12: < )
(13: For , 13: <= )
(13: For , 14: = )
(13: For , 15: == )
(13: For , 16: > )
(13: For , 17: >= )
(13: For , 18: FLOAT )
(13: For , 19: ID )
(13: For , 20: NUMBER )
(13: For , 21: None )
(13: For , 22: STRING )
(13: For , 23: [ )
(13: For , 24: ] )
(13: For , 25: begin )
(13: For , 26: else )
(13: For , 27: end )
(13: For , 28: false )
(13: For , 29: for )for(IDinFactor){Statements}
(13: For , 30: if )
(13: For , 31: in )
(13: For , 32: loadPdf )
(13: For , 33: mergePdf )
(13: For , 34: optimizePdf )
(13: For , 35: splitPdf )
(13: For , 36: true )
(13: For , 37: while )
(13: For , 38: { )
(13: For , 39: | )
(13: For , 40: } )
(14: LogicOP , 0: != )
(14: LogicOP , 1: % )
(14: LogicOP , 2: & )&
(14: LogicOP , 3: '' )
(14: LogicOP , 4: ( )
(14: LogicOP , 5: ) )
(14: LogicOP , 6: * )
(14: LogicOP , 7: + )
(14: LogicOP , 8: , )
(14: LogicOP , 9: - )
(14: LogicOP , 10: / )
(14: LogicOP , 11: ; )
(14: LogicOP , 12: < )
(14: LogicOP , 13: <= )
(14: LogicOP , 14: = )
(14: LogicOP , 15: == )
(14: LogicOP , 16: > )
(14: LogicOP , 17: >= )
(14: LogicOP , 18: FLOAT )
(14: LogicOP , 19: ID )
(14: LogicOP , 20: NUMBER )
(14: LogicOP , 21: None )
(14: LogicOP , 22: STRING )
(14: LogicOP , 23: [ )
(14: LogicOP , 24: ] )
(14: LogicOP , 25: begin )
(14: LogicOP , 26: else )
(14: LogicOP , 27: end )
(14: LogicOP , 28: false )
(14: LogicOP , 29: for )
(14: LogicOP , 30: if )
(14: LogicOP , 31: in )
(14: LogicOP , 32: loadPdf )
(14: LogicOP , 33: mergePdf )
(14: LogicOP , 34: optimizePdf )
(14: LogicOP , 35: splitPdf )
(14: LogicOP , 36: true )
(14: LogicOP , 37: while )
(14: LogicOP , 38: { )
(14: LogicOP , 39: | )|
(14: LogicOP , 40: } )
(15: Expression , 0: != )
(15: Expression , 1: % )
(15: Expression , 2: & )
(15: Expression , 3: '' )
(15: Expression , 4: ( )(Expression)
(15: Expression , 5: ) )
(15: Expression , 6: * )
(15: Expression , 7: + )
(15: Expression , 8: , )
(15: Expression , 9: - )CompExprExpressionP
(15: Expression , 10: / )
(15: Expression , 11: ; )
(15: Expression , 12: < )
(15: Expression , 13: <= )
(15: Expression , 14: = )
(15: Expression , 15: == )
(15: Expression , 16: > )
(15: Expression , 17: >= )
(15: Expression , 18: FLOAT )CompExprExpressionP
(15: Expression , 19: ID )CompExprExpressionP
(15: Expression , 20: NUMBER )CompExprExpressionP
(15: Expression , 21: None )CompExprExpressionP
(15: Expression , 22: STRING )CompExprExpressionP
(15: Expression , 23: [ )
(15: Expression , 24: ] )
(15: Expression , 25: begin )
(15: Expression , 26: else )
(15: Expression , 27: end )
(15: Expression , 28: false )CompExprExpressionP
(15: Expression , 29: for )
(15: Expression , 30: if )
(15: Expression , 31: in )
(15: Expression , 32: loadPdf )
(15: Expression , 33: mergePdf )
(15: Expression , 34: optimizePdf )
(15: Expression , 35: splitPdf )
(15: Expression , 36: true )CompExprExpressionP
(15: Expression , 37: while )
(15: Expression , 38: { )
(15: Expression , 39: | )
(15: Expression , 40: } )
(16: Else , 0: != )
(16: Else , 1: % )
(16: Else , 2: & )
(16: Else , 3: '' )
(16: Else , 4: ( )
(16: Else , 5: ) )
(16: Else , 6: * )
(16: Else , 7: + )
(16: Else , 8: , )
(16: Else , 9: - )
(16: Else , 10: / )
(16: Else , 11: ; )''
(16: Else , 12: < )
(16: Else , 13: <= )
(16: Else , 14: = )
(16: Else , 15: == )
(16: Else , 16: > )
(16: Else , 17: >= )
(16: Else , 18: FLOAT )
(16: Else , 19: ID )
(16: Else , 20: NUMBER )
(16: Else , 21: None )
(16: Else , 22: STRING )
(16: Else , 23: [ )
(16: Else , 24: ] )
(16: Else , 25: begin )
(16: Else , 26: else )else{Statements}
(16: Else , 27: end )
(16: Else , 28: false )
(16: Else , 29: for )
(16: Else , 30: if )
(16: Else , 31: in )
(16: Else , 32: loadPdf )
(16: Else , 33: mergePdf )
(16: Else , 34: optimizePdf )
(16: Else , 35: splitPdf )
(16: Else , 36: true )
(16: Else , 37: while )
(16: Else , 38: { )
(16: Else , 39: | )
(16: Else , 40: } )
(17: List , 0: != )
(17: List , 1: % )
(17: List , 2: & )
(17: List , 3: '' )
(17: List , 4: ( )
(17: List , 5: ) )
(17: List , 6: * )
(17: List , 7: + )
(17: List , 8: , )
(17: List , 9: - )
(17: List , 10: / )
(17: List , 11: ; )
(17: List , 12: < )
(17: List , 13: <= )
(17: List , 14: = )
(17: List , 15: == )
(17: List , 16: > )
(17: List , 17: >= )
(17: List , 18: FLOAT )
(17: List , 19: ID )
(17: List , 20: NUMBER )
(17: List , 21: None )
(17: List , 22: STRING )
(17: List , 23: [ )
(17: List , 24: ] )
(17: List , 25: begin )
(17: List , 26: else )
(17: List , 27: end )
(17: List , 28: false )
(17: List , 29: for )
(17: List , 30: if )
(17: List , 31: in )
(17: List , 32: loadPdf )
(17: List , 33: mergePdf )
(17: List , 34: optimizePdf )
(17: List , 35: splitPdf )
(17: List , 36: true )
(17: List , 37: while )
(17: List , 38: { ){FactorListTail}
(17: List , 39: | )
(17: List , 40: } )
(18: Assign , 0: != )
(18: Assign , 1: % )
(18: Assign , 2: & )
(18: Assign , 3: '' )
(18: Assign , 4: ( )
(18: Assign , 5: ) )
(18: Assign , 6: * )
(18: Assign , 7: + )
(18: Assign , 8: , )
(18: Assign , 9: - )
(18: Assign , 10: / )
(18: Assign , 11: ; )
(18: Assign , 12: < )
(18: Assign , 13: <= )
(18: Assign , 14: = )
(18: Assign , 15: == )
(18: Assign , 16: > )
(18: Assign , 17: >= )
(18: Assign , 18: FLOAT )
(18: Assign , 19: ID )ID=Assignable
(18: Assign , 20: NUMBER )
(18: Assign , 21: None )
(18: Assign , 22: STRING )
(18: Assign , 23: [ )
(18: Assign , 24: ] )
(18: Assign , 25: begin )
(18: Assign , 26: else )
(18: Assign , 27: end )
(18: Assign , 28: false )
(18: Assign , 29: for )
(18: Assign , 30: if )
(18: Assign , 31: in )
(18: Assign , 32: loadPdf )
(18: Assign , 33: mergePdf )
(18: Assign , 34: optimizePdf )
(18: Assign , 35: splitPdf )
(18: Assign , 36: true )
(18: Assign , 37: while )
(18: Assign , 38: { )
(18: Assign , 39: | )
(18: Assign , 40: } )
(19: Assignable , 0: != )
(19: Assignable , 1: % )
(19: Assignable , 2: & )
(19: Assignable , 3: '' )
(19: Assignable , 4: ( )
(19: Assignable , 5: ) )
(19: Assignable , 6: * )
(19: Assignable , 7: + )
(19: Assignable , 8: , )
(19: Assignable , 9: - )Factor
(19: Assignable , 10: / )
(19: Assignable , 11: ; )
(19: Assignable , 12: < )
(19: Assignable , 13: <= )
(19: Assignable , 14: = )
(19: Assignable , 15: == )
(19: Assignable , 16: > )
(19: Assignable , 17: >= )
(19: Assignable , 18: FLOAT )Factor
(19: Assignable , 19: ID )Factor
(19: Assignable , 20: NUMBER )Factor
(19: Assignable , 21: None )Factor
(19: Assignable , 22: STRING )Factor
(19: Assignable , 23: [ )
(19: Assignable , 24: ] )
(19: Assignable , 25: begin )
(19: Assignable , 26: else )
(19: Assignable , 27: end )
(19: Assignable , 28: false )Factor
(19: Assignable , 29: for )
(19: Assignable , 30: if )
(19: Assignable , 31: in )
(19: Assignable , 32: loadPdf )Function
(19: Assignable , 33: mergePdf )Function
(19: Assignable , 34: optimizePdf )Function
(19: Assignable , 35: splitPdf )Function
(19: Assignable , 36: true )Factor
(19: Assignable , 37: while )
(19: Assignable , 38: { )List
(19: Assignable , 39: | )
(19: Assignable , 40: } )
(20: Function , 0: != )
(20: Function , 1: % )
(20: Function , 2: & )
(20: Function , 3: '' )
(20: Function , 4: ( )
(20: Function , 5: ) )
(20: Function , 6: * )
(20: Function , 7: + )
(20: Function , 8: , )
(20: Function , 9: - )
(20: Function , 10: / )
(20: Function , 11: ; )
(20: Function , 12: < )
(20: Function , 13: <= )
(20: Function , 14: = )
(20: Function , 15: == )
(20: Function , 16: > )
(20: Function , 17: >= )
(20: Function , 18: FLOAT )
(20: Function , 19: ID )
(20: Function , 20: NUMBER )
(20: Function , 21: None )
(20: Function , 22: STRING )
(20: Function , 23: [ )
(20: Function , 24: ] )
(20: Function , 25: begin )
(20: Function , 26: else )
(20: Function , 27: end )
(20: Function , 28: false )
(20: Function , 29: for )
(20: Function , 30: if )
(20: Function , 31: in )
(20: Function , 32: loadPdf )loadPdf(Factor)
(20: Function , 33: mergePdf )mergePdf(List)
(20: Function , 34: optimizePdf )optimizePdf(Factor)
(20: Function , 35: splitPdf )splitPdf(Factor)
(20: Function , 36: true )
(20: Function , 37: while )
(20: Function , 38: { )
(20: Function , 39: | )
(20: Function , 40: } )
(21: If , 0: != )
(21: If , 1: % )
(21: If , 2: & )
(21: If , 3: '' )
(21: If , 4: ( )
(21: If , 5: ) )
(21: If , 6: * )
(21: If , 7: + )
(21: If , 8: , )
(21: If , 9: - )
(21: If , 10: / )
(21: If , 11: ; )
(21: If , 12: < )
(21: If , 13: <= )
(21: If , 14: = )
(21: If , 15: == )
(21: If , 16: > )
(21: If , 17: >= )
(21: If , 18: FLOAT )
(21: If , 19: ID )
(21: If , 20: NUMBER )
(21: If , 21: None )
(21: If , 22: STRING )
(21: If , 23: [ )
(21: If , 24: ] )
(21: If , 25: begin )
(21: If , 26: else )
(21: If , 27: end )
(21: If , 28: false )
(21: If , 29: for )
(21: If , 30: if )if(Expression){Statements}Else
(21: If , 31: in )
(21: If , 32: loadPdf )
(21: If , 33: mergePdf )
(21: If , 34: optimizePdf )
(21: If , 35: splitPdf )
(21: If , 36: true )
(21: If , 37: while )
(21: If , 38: { )
(21: If , 39: | )
(21: If , 40: } )
(22: ExpressionP , 0: != )
(22: ExpressionP , 1: % )
(22: ExpressionP , 2: & )LogicOPExpression
(22: ExpressionP , 3: '' )
(22: ExpressionP , 4: ( )
(22: ExpressionP , 5: ) )''
(22: ExpressionP , 6: * )
(22: ExpressionP , 7: + )
(22: ExpressionP , 8: , )
(22: ExpressionP , 9: - )
(22: ExpressionP , 10: / )
(22: ExpressionP , 11: ; )
(22: ExpressionP , 12: < )
(22: ExpressionP , 13: <= )
(22: ExpressionP , 14: = )
(22: ExpressionP , 15: == )
(22: ExpressionP , 16: > )
(22: ExpressionP , 17: >= )
(22: ExpressionP , 18: FLOAT )
(22: ExpressionP , 19: ID )
(22: ExpressionP , 20: NUMBER )
(22: ExpressionP , 21: None )
(22: ExpressionP , 22: STRING )
(22: ExpressionP , 23: [ )
(22: ExpressionP , 24: ] )
(22: ExpressionP , 25: begin )
(22: ExpressionP , 26: else )
(22: ExpressionP , 27: end )
(22: ExpressionP , 28: false )
(22: ExpressionP , 29: for )
(22: ExpressionP , 30: if )
(22: ExpressionP , 31: in )
(22: ExpressionP , 32: loadPdf )
(22: ExpressionP , 33: mergePdf )
(22: ExpressionP , 34: optimizePdf )
(22: ExpressionP , 35: splitPdf )
(22: ExpressionP , 36: true )
(22: ExpressionP , 37: while )
(22: ExpressionP , 38: { )
(22: ExpressionP , 39: | )LogicOPExpression
(22: ExpressionP , 40: } )
(23: Program , 0: != )
(23: Program , 1: % )
(23: Program , 2: & )
(23: Program , 3: '' )
(23: Program , 4: ( )
(23: Program , 5: ) )
(23: Program , 6: * )
(23: Program , 7: + )
(23: Program , 8: , )
(23: Program , 9: - )
(23: Program , 10: / )
(23: Program , 11: ; )
(23: Program , 12: < )
(23: Program , 13: <= )
(23: Program , 14: = )
(23: Program , 15: == )
(23: Program , 16: > )
(23: Program , 17: >= )
(23: Program , 18: FLOAT )
(23: Program , 19: ID )
(23: Program , 20: NUMBER )
(23: Program , 21: None )
(23: Program , 22: STRING )
(23: Program , 23: [ )
(23: Program , 24: ] )
(23: Program , 25: begin )beginStatementsend;
(23: Program , 26: else )
(23: Program , 27: end )
(23: Program , 28: false )
(23: Program , 29: for )
(23: Program , 30: if )
(23: Program , 31: in )
(23: Program , 32: loadPdf )
(23: Program , 33: mergePdf )
(23: Program , 34: optimizePdf )
(23: Program , 35: splitPdf )
(23: Program , 36: true )
(23: Program , 37: while )
(23: Program , 38: { )
(23: Program , 39: | )
(23: Program , 40: } )
(24: CompExpr , 0: != )
(24: CompExpr , 1: % )
(24: CompExpr , 2: & )
(24: CompExpr , 3: '' )
(24: CompExpr , 4: ( )
(24: CompExpr , 5: ) )
(24: CompExpr , 6: * )
(24: CompExpr , 7: + )
(24: CompExpr , 8: , )
(24: CompExpr , 9: - )TermCompExprP
(24: CompExpr , 10: / )
(24: CompExpr , 11: ; )
(24: CompExpr , 12: < )
(24: CompExpr , 13: <= )
(24: CompExpr , 14: = )
(24: CompExpr , 15: == )
(24: CompExpr , 16: > )
(24: CompExpr , 17: >= )
(24: CompExpr , 18: FLOAT )TermCompExprP
(24: CompExpr , 19: ID )TermCompExprP
(24: CompExpr , 20: NUMBER )TermCompExprP
(24: CompExpr , 21: None )TermCompExprP
(24: CompExpr , 22: STRING )TermCompExprP
(24: CompExpr , 23: [ )
(24: CompExpr , 24: ] )
(24: CompExpr , 25: begin )
(24: CompExpr , 26: else )
(24: CompExpr , 27: end )
(24: CompExpr , 28: false )TermCompExprP
(24: CompExpr , 29: for )
(24: CompExpr , 30: if )
(24: CompExpr , 31: in )
(24: CompExpr , 32: loadPdf )
(24: CompExpr , 33: mergePdf )
(24: CompExpr , 34: optimizePdf )
(24: CompExpr , 35: splitPdf )
(24: CompExpr , 36: true )TermCompExprP
(24: CompExpr , 37: while )
(24: CompExpr , 38: { )
(24: CompExpr , 39: | )
(24: CompExpr , 40: } )
